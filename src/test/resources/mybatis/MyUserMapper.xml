<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.model.MyUserMapper">
    <resultMap id="BaseResultMap" type="com.mybatis.model.MyUser">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="age" jdbcType="INTEGER" property="age"/>
        <result column="gender" jdbcType="VARCHAR" property="gender"/>
        <result column="time" jdbcType="TIMESTAMP" property="time"/>
        <result column="enabled" jdbcType="BIT" property="enabled"/>
        <result column="version" jdbcType="INTEGER" property="version"/>
        <result column="deleted" jdbcType="BIT" property="deleted"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach close=")" collection="example.oredCriteria" item="criteria" open="and (" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_With_Version_Where_Clause">
        <where>
            version = #{version,jdbcType=INTEGER}
            <if test="example.oredCriteria.size() > 0">
                <foreach close=")" collection="example.oredCriteria" item="criteria" open="and (" separator="or">
                    <if test="criteria.valid">
                        <trim prefix="(" prefixOverrides="and" suffix=")">
                            <foreach collection="criteria.criteria" item="criterion">
                                <choose>
                                    <when test="criterion.noValue">
                                        and ${criterion.condition}
                                    </when>
                                    <when test="criterion.singleValue">
                                        and ${criterion.condition} #{criterion.value}
                                    </when>
                                    <when test="criterion.betweenValue">
                                        and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                    </when>
                                    <when test="criterion.listValue">
                                        and ${criterion.condition}
                                        <foreach close=")" collection="criterion.value" item="listItem" open="("
                                                 separator=",">
                                            #{listItem}
                                        </foreach>
                                    </when>
                                </choose>
                            </foreach>
                        </trim>
                    </if>
                </foreach>
            </if>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, name, age, gender, time, enabled, version, deleted, create_time, update_time
    </sql>
    <select id="selectByExample" parameterType="com.mybatis.model.MyUserExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="rows != null">
            <if test="offset != null">
                limit ${offset}, ${rows}
            </if>
            <if test="offset == null">
                limit ${rows}
            </if>
        </if>
    </select>
    <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from user
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        <if test="example != null and example.rows != null">
            <if test="example.offset != null">
                limit ${example.offset}, ${example.rows}
            </if>
            <if test="example.offset == null">
                limit ${example.rows}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.mybatis.model.MyUserExample">
        delete from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.mybatis.model.MyUser">
        insert into user (id, name, age,
        gender, time, enabled,
        version, deleted, create_time,
        update_time)
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER},
        #{gender,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}, #{enabled,jdbcType=BIT},
        #{version,jdbcType=INTEGER}, #{deleted,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP},
        #{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="map">
        insert into user
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach close=")" collection="selective" item="column" open="(" separator=",">
                    ${column.escapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <trim prefix="(" suffix=")" suffixOverrides=",">
                    <if test="record.id != null">
                        id,
                    </if>
                    <if test="record.name != null">
                        name,
                    </if>
                    <if test="record.age != null">
                        age,
                    </if>
                    <if test="record.gender != null">
                        gender,
                    </if>
                    <if test="record.time != null">
                        time,
                    </if>
                    <if test="record.enabled != null">
                        enabled,
                    </if>
                    <if test="record.version != null">
                        version,
                    </if>
                    <if test="record.deleted != null">
                        deleted,
                    </if>
                    <if test="record.createTime != null">
                        create_time,
                    </if>
                    <if test="record.updateTime != null">
                        update_time,
                    </if>
                </trim>
                <trim prefix="(" suffix=")" suffixOverrides=","/>
            </otherwise>
        </choose>
        values
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach close=")" collection="selective" item="column" open="(" separator=",">
                    #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                </foreach>
            </when>
            <otherwise>
                <trim prefix="(" suffix=")" suffixOverrides=",">
                    <if test="record.id != null">
                        #{record.id,jdbcType=INTEGER},
                    </if>
                    <if test="record.name != null">
                        #{record.name,jdbcType=VARCHAR},
                    </if>
                    <if test="record.age != null">
                        #{record.age,jdbcType=INTEGER},
                    </if>
                    <if test="record.gender != null">
                        #{record.gender,jdbcType=VARCHAR},
                    </if>
                    <if test="record.time != null">
                        #{record.time,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.enabled != null">
                        #{record.enabled,jdbcType=BIT},
                    </if>
                    <if test="record.version != null">
                        #{record.version,jdbcType=INTEGER},
                    </if>
                    <if test="record.deleted != null">
                        #{record.deleted,jdbcType=BIT},
                    </if>
                    <if test="record.createTime != null">
                        #{record.createTime,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.updateTime != null">
                        #{record.updateTime,jdbcType=TIMESTAMP},
                    </if>
                </trim>
            </otherwise>
        </choose>
    </insert>
    <select id="countByExample" parameterType="com.mybatis.model.MyUserExample" resultType="java.lang.Long">
        select count(*) from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update user
        SET
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                </foreach>
            </when>
            <otherwise>
                <trim suffixOverrides=",">
                    <if test="record.id != null">
                        id = #{record.id,jdbcType=INTEGER},
                    </if>
                    <if test="record.name != null">
                        name = #{record.name,jdbcType=VARCHAR},
                    </if>
                    <if test="record.age != null">
                        age = #{record.age,jdbcType=INTEGER},
                    </if>
                    <if test="record.gender != null">
                        gender = #{record.gender,jdbcType=VARCHAR},
                    </if>
                    <if test="record.time != null">
                        time = #{record.time,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.enabled != null">
                        enabled = #{record.enabled,jdbcType=BIT},
                    </if>
                    <if test="record.version != null">
                        version = #{record.version,jdbcType=INTEGER},
                    </if>
                    <if test="record.deleted != null">
                        deleted = #{record.deleted,jdbcType=BIT},
                    </if>
                    <if test="record.createTime != null">
                        create_time = #{record.createTime,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.updateTime != null">
                        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
                    </if>
                </trim>
            </otherwise>
        </choose>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update user
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        age = #{record.age,jdbcType=INTEGER},
        gender = #{record.gender,jdbcType=VARCHAR},
        time = #{record.time,jdbcType=TIMESTAMP},
        enabled = #{record.enabled,jdbcType=BIT},
        version = #{record.version,jdbcType=INTEGER},
        deleted = #{record.deleted,jdbcType=BIT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="map">
        update user
        SET
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                </foreach>
            </when>
            <otherwise>
                <trim suffixOverrides=",">
                    <if test="record.name != null">
                        name = #{record.name,jdbcType=VARCHAR},
                    </if>
                    <if test="record.age != null">
                        age = #{record.age,jdbcType=INTEGER},
                    </if>
                    <if test="record.gender != null">
                        gender = #{record.gender,jdbcType=VARCHAR},
                    </if>
                    <if test="record.time != null">
                        time = #{record.time,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.enabled != null">
                        enabled = #{record.enabled,jdbcType=BIT},
                    </if>
                    <if test="record.version != null">
                        version = #{record.version,jdbcType=INTEGER},
                    </if>
                    <if test="record.deleted != null">
                        deleted = #{record.deleted,jdbcType=BIT},
                    </if>
                    <if test="record.createTime != null">
                        create_time = #{record.createTime,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.updateTime != null">
                        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
                    </if>
                </trim>
            </otherwise>
        </choose>
        where id = #{record.id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.mybatis.model.MyUser">
        update user
        set name = #{name,jdbcType=VARCHAR},
        age = #{age,jdbcType=INTEGER},
        gender = #{gender,jdbcType=VARCHAR},
        time = #{time,jdbcType=TIMESTAMP},
        enabled = #{enabled,jdbcType=BIT},
        version = #{version,jdbcType=INTEGER},
        deleted = #{deleted,jdbcType=BIT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectOneByExample" parameterType="com.mybatis.model.MyUserExample" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
        select
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.aliasedEscapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <include refid="Base_Column_List"/>
            </otherwise>
        </choose>
        from user
        <if test="example != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <insert id="batchInsert" parameterType="map">
        insert into user
        (id, name, age, gender, time, enabled, version, deleted, create_time, update_time
        )
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id,jdbcType=INTEGER}, #{item.name,jdbcType=VARCHAR}, #{item.age,jdbcType=INTEGER},
            #{item.gender,jdbcType=VARCHAR}, #{item.time,jdbcType=TIMESTAMP}, #{item.enabled,jdbcType=BIT},
            #{item.version,jdbcType=INTEGER}, #{item.deleted,jdbcType=BIT}, #{item.createTime,jdbcType=TIMESTAMP},
            #{item.updateTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>
    <insert id="batchInsertSelective" parameterType="map">
        insert into user (
        <foreach collection="selective" item="column" separator=",">
            ${column.escapedColumnName}
        </foreach>
        )
        values
        <foreach collection="list" item="item" separator=",">
            (
            <foreach collection="selective" item="column" separator=",">
                <if test="'id'.toString() == column.value">
                    #{item.id,jdbcType=INTEGER}
                </if>
                <if test="'name'.toString() == column.value">
                    #{item.name,jdbcType=VARCHAR}
                </if>
                <if test="'age'.toString() == column.value">
                    #{item.age,jdbcType=INTEGER}
                </if>
                <if test="'gender'.toString() == column.value">
                    #{item.gender,jdbcType=VARCHAR}
                </if>
                <if test="'time'.toString() == column.value">
                    #{item.time,jdbcType=TIMESTAMP}
                </if>
                <if test="'enabled'.toString() == column.value">
                    #{item.enabled,jdbcType=BIT}
                </if>
                <if test="'version'.toString() == column.value">
                    #{item.version,jdbcType=INTEGER}
                </if>
                <if test="'deleted'.toString() == column.value">
                    #{item.deleted,jdbcType=BIT}
                </if>
                <if test="'create_time'.toString() == column.value">
                    #{item.createTime,jdbcType=TIMESTAMP}
                </if>
                <if test="'update_time'.toString() == column.value">
                    #{item.updateTime,jdbcType=TIMESTAMP}
                </if>
            </foreach>
            )
        </foreach>
    </insert>
    <insert id="upsertSelective" parameterType="map">
        insert into user
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach close=")" collection="selective" item="column" open="(" separator=",">
                    ${column.escapedColumnName}
                </foreach>
            </when>
            <otherwise>
                <trim prefix="(" suffix=")" suffixOverrides=",">
                    <if test="record.id != null">
                        id,
                    </if>
                    <if test="record.name != null">
                        name,
                    </if>
                    <if test="record.age != null">
                        age,
                    </if>
                    <if test="record.gender != null">
                        gender,
                    </if>
                    <if test="record.time != null">
                        time,
                    </if>
                    <if test="record.enabled != null">
                        enabled,
                    </if>
                    <if test="record.version != null">
                        version,
                    </if>
                    <if test="record.deleted != null">
                        deleted,
                    </if>
                    <if test="record.createTime != null">
                        create_time,
                    </if>
                    <if test="record.updateTime != null">
                        update_time,
                    </if>
                </trim>
                <trim prefix="(" suffix=")" suffixOverrides=","/>
            </otherwise>
        </choose>
        values
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach close=")" collection="selective" item="column" open="(" separator=",">
                    #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                </foreach>
            </when>
            <otherwise>
                <trim prefix="(" suffix=")" suffixOverrides=",">
                    <if test="record.id != null">
                        #{record.id,jdbcType=INTEGER},
                    </if>
                    <if test="record.name != null">
                        #{record.name,jdbcType=VARCHAR},
                    </if>
                    <if test="record.age != null">
                        #{record.age,jdbcType=INTEGER},
                    </if>
                    <if test="record.gender != null">
                        #{record.gender,jdbcType=VARCHAR},
                    </if>
                    <if test="record.time != null">
                        #{record.time,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.enabled != null">
                        #{record.enabled,jdbcType=BIT},
                    </if>
                    <if test="record.version != null">
                        #{record.version,jdbcType=INTEGER},
                    </if>
                    <if test="record.deleted != null">
                        #{record.deleted,jdbcType=BIT},
                    </if>
                    <if test="record.createTime != null">
                        #{record.createTime,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.updateTime != null">
                        #{record.updateTime,jdbcType=TIMESTAMP},
                    </if>
                </trim>
            </otherwise>
        </choose>
        on duplicate key update
        <choose>
            <when test="selective != null and selective.length > 0">
                <foreach collection="selective" item="column" separator=",">
                    ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                </foreach>
            </when>
            <otherwise>
                <trim suffixOverrides=",">
                    <if test="record.id != null">
                        id = #{record.id,jdbcType=INTEGER},
                    </if>
                    <if test="record.name != null">
                        name = #{record.name,jdbcType=VARCHAR},
                    </if>
                    <if test="record.age != null">
                        age = #{record.age,jdbcType=INTEGER},
                    </if>
                    <if test="record.gender != null">
                        gender = #{record.gender,jdbcType=VARCHAR},
                    </if>
                    <if test="record.time != null">
                        time = #{record.time,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.enabled != null">
                        enabled = #{record.enabled,jdbcType=BIT},
                    </if>
                    <if test="record.version != null">
                        version = #{record.version,jdbcType=INTEGER},
                    </if>
                    <if test="record.deleted != null">
                        deleted = #{record.deleted,jdbcType=BIT},
                    </if>
                    <if test="record.createTime != null">
                        create_time = #{record.createTime,jdbcType=TIMESTAMP},
                    </if>
                    <if test="record.updateTime != null">
                        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
                    </if>
                </trim>
            </otherwise>
        </choose>
    </insert>
    <insert id="upsert" parameterType="com.mybatis.model.MyUser">
        insert into user
        (id, name, age, gender, time, enabled, version, deleted, create_time, update_time
        )
        values
        (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, #{gender,jdbcType=VARCHAR},
        #{time,jdbcType=TIMESTAMP}, #{enabled,jdbcType=BIT}, #{version,jdbcType=INTEGER},
        #{deleted,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
        )
        on duplicate key update
        id = #{id,jdbcType=INTEGER},
        name = #{name,jdbcType=VARCHAR},
        age = #{age,jdbcType=INTEGER},
        gender = #{gender,jdbcType=VARCHAR},
        time = #{time,jdbcType=TIMESTAMP},
        enabled = #{enabled,jdbcType=BIT},
        version = #{version,jdbcType=INTEGER},
        deleted = #{deleted,jdbcType=BIT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
    </insert>
    <delete id="deleteWithVersionByPrimaryKey" parameterType="map">
        delete from user
        where version = #{version,jdbcType=INTEGER}
        and id = #{key,jdbcType=INTEGER}
    </delete>
    <delete id="deleteWithVersionByExample" parameterType="map">
        delete from user
        <if test="_parameter != null">
            <include refid="Update_By_Example_With_Version_Where_Clause"/>
        </if>
    </delete>
    <update id="updateWithVersionByExample" parameterType="map">
        update user
        set version = version + 1,
        id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        age = #{record.age,jdbcType=INTEGER},
        gender = #{record.gender,jdbcType=VARCHAR},
        time = #{record.time,jdbcType=TIMESTAMP},
        enabled = #{record.enabled,jdbcType=BIT},
        deleted = #{record.deleted,jdbcType=BIT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_With_Version_Where_Clause"/>
        </if>
    </update>
    <update id="updateWithVersionByExampleSelective" parameterType="map">
        update user
        <set>
            version = version + 1,
            <choose>
                <when test="selective != null and selective.length > 0">
                    <foreach collection="selective" item="column" separator=",">
                        <if test="column.value != 'version'.toString()">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                        </if>
                    </foreach>
                </when>
                <otherwise>
                    <trim suffixOverrides=",">
                        <if test="record.id != null">
                            id = #{record.id,jdbcType=INTEGER},
                        </if>
                        <if test="record.name != null">
                            name = #{record.name,jdbcType=VARCHAR},
                        </if>
                        <if test="record.age != null">
                            age = #{record.age,jdbcType=INTEGER},
                        </if>
                        <if test="record.gender != null">
                            gender = #{record.gender,jdbcType=VARCHAR},
                        </if>
                        <if test="record.time != null">
                            time = #{record.time,jdbcType=TIMESTAMP},
                        </if>
                        <if test="record.enabled != null">
                            enabled = #{record.enabled,jdbcType=BIT},
                        </if>
                        <if test="record.deleted != null">
                            deleted = #{record.deleted,jdbcType=BIT},
                        </if>
                        <if test="record.createTime != null">
                            create_time = #{record.createTime,jdbcType=TIMESTAMP},
                        </if>
                        <if test="record.updateTime != null">
                            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
                        </if>
                    </trim>
                </otherwise>
            </choose>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_With_Version_Where_Clause"/>
        </if>
    </update>
    <update id="updateWithVersionByPrimaryKey" parameterType="map">
        update user
        set version = version + 1,
        name = #{record.name,jdbcType=VARCHAR},
        age = #{record.age,jdbcType=INTEGER},
        gender = #{record.gender,jdbcType=VARCHAR},
        time = #{record.time,jdbcType=TIMESTAMP},
        enabled = #{record.enabled,jdbcType=BIT},
        deleted = #{record.deleted,jdbcType=BIT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        where version = #{version,jdbcType=INTEGER}
        and id = #{record.id,jdbcType=INTEGER}
    </update>
    <update id="updateWithVersionByPrimaryKeySelective" parameterType="map">
        update user
        <set>
            version = version + 1,
            <choose>
                <when test="selective != null and selective.length > 0">
                    <foreach collection="selective" item="column" separator=",">
                        <if test="column.value != 'version'.toString()">
                            ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
                        </if>
                    </foreach>
                </when>
                <otherwise>
                    <trim suffixOverrides=",">
                        <if test="record.name != null">
                            name = #{record.name,jdbcType=VARCHAR},
                        </if>
                        <if test="record.age != null">
                            age = #{record.age,jdbcType=INTEGER},
                        </if>
                        <if test="record.gender != null">
                            gender = #{record.gender,jdbcType=VARCHAR},
                        </if>
                        <if test="record.time != null">
                            time = #{record.time,jdbcType=TIMESTAMP},
                        </if>
                        <if test="record.enabled != null">
                            enabled = #{record.enabled,jdbcType=BIT},
                        </if>
                        <if test="record.deleted != null">
                            deleted = #{record.deleted,jdbcType=BIT},
                        </if>
                        <if test="record.createTime != null">
                            create_time = #{record.createTime,jdbcType=TIMESTAMP},
                        </if>
                        <if test="record.updateTime != null">
                            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
                        </if>
                    </trim>
                </otherwise>
            </choose>
        </set>
        where version = #{version,jdbcType=INTEGER}
        and id = #{record.id,jdbcType=INTEGER}
    </update>
</mapper>